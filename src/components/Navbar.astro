---
const currentPath = Astro.url.pathname;
---

<header class="navbar">
    <div class="navbar-container">
        <div class="brand">
            <a href="/"><span class="accent">G</span>impac<span class="accent">O</span></a>
        </div>
        
        <button class="menu-toggle" id="menu-toggle" aria-label="Toggle menu" aria-controls="nav-links" aria-expanded="false">
            <svg class="hamburger-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
            <svg class="close-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
        </button>

        <nav class="nav-links" id="nav-links">
            <a href="/" class="nav-link" class:list={{ active: currentPath === '/' }}>Inicio</a>
            <a href="/trainings" class="nav-link" class:list={{ active: currentPath === '/trainings' }}>Entrenamientos</a>
            <a href="/createWorkout" class="nav-link" class="nav-link" class:list={{ active: currentPath === '/createWorkout' }}>Crear Rutina</a>
            <a href="/workout" class="nav-link" class:list={{ active: currentPath === '/workout' }}>Entrenar</a>
            <a href="/history" class="nav-link" class:list={{ active: currentPath === '/history' }}>Historial</a>
            <a id="install-app-link" href="#" class="nav-link" style="display: none;">Instalar App</a>
            <button id="logout-btn" class="nav-link">Cerrar Sesión</button>
        </nav>
    </div>
</header>

<style>
    .navbar { background-color: rgba(255, 255, 255, 0.95); backdrop-filter: blur(8px); border-bottom: 1px solid #F0F0F0; box-shadow: 0 2px 10px -5px rgba(0, 0, 0, 0.05); padding: 1rem 2rem; position: sticky; top: 0; width: 100%; z-index: 100; }
    .navbar-container { max-width: 72rem; margin: 0 auto; display: flex; justify-content: space-between; align-items: center; }
    .brand a { font-family: 'Poppins', sans-serif; font-size: 1.75rem; font-weight: 700; color: var(--primary-color, #2A2A2A); text-decoration: none; }
    .brand .accent { color: var(--accent-color, #008080); }
    .nav-links { display: flex; align-items: center; gap: 2.5rem; }
    .nav-link { font-family: 'Lato', sans-serif; font-size: 1rem; font-weight: 600; color: var(--primary-color, #2A2A2A); text-decoration: none; padding: 0.5rem 0; position: relative; transition: color 0.2s ease; cursor: pointer; }
    .nav-link::after { content: ''; position: absolute; bottom: -2px; left: 0; right: 0; height: 3px; background-color: var(--accent-color, #008080); border-radius: 2px; transform: scaleX(0); transform-origin: center; transition: transform 0.3s cubic-bezier(0.19, 1, 0.22, 1); }
    .nav-link:hover::after { transform: scaleX(1); }
    .nav-link.active { color: var(--primary-color, #2A2A2A); }
    .nav-link.active::after { transform: scaleX(1); }
    button.nav-link { background: none; border: none; padding: 0; margin: 0; text-align: inherit; }
    button.nav-link:hover { color: var(--accent-color, #008080); }

    .menu-toggle { display: none; background: none; border: none; cursor: pointer; padding: 0; z-index: 1000; color: var(--primary-color, #2A2A2A); }
    .menu-toggle .close-icon { display: none; }
    .menu-toggle.is-open .hamburger-icon { display: none; }
    .menu-toggle.is-open .close-icon { display: block; }

    @media (max-width: 768px) {
        .navbar-container {
            position: relative; /* Set context for the absolute menu toggle */
            justify-content: center; /* Center the brand/logo */
        }

        .menu-toggle {
            display: block;
            position: absolute; /* Take the button out of the flex flow */
            right: 2rem; /* Match the navbar horizontal padding */
            top: 50%; /* Vertically center */
            transform: translateY(-50%);
        }
        
        .nav-links {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: #FFFFFF;
            flex-direction: column;
            align-items: center;
            gap: 1.5rem;
            padding: 2rem 0;
            border-top: 1px solid #F5F5F5;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05);
            transform: translateY(-120%);
            transition: transform 0.3s ease-in-out;
            z-index: 999;
        }
        .nav-links.is-open { transform: translateY(0); }
        .nav-link, button.nav-link { font-size: 1.125rem; width: 100%; text-align: center; }
    }
</style>

<script>
    import { signOut } from "firebase/auth";
    import { auth } from "../firebase/config";

    const logoutButton = document.getElementById('logout-btn');

    if (logoutButton) {
        logoutButton.addEventListener('click', async () => {
            try {
                await signOut(auth);
                console.log('Cierre de sesión exitoso.');
                window.location.href = '/loginPage'; 
            } catch (error) {
                console.error('Error al cerrar sesión:', error);
            }
        });
    }

    const menuToggle = document.getElementById('menu-toggle');
    const navLinks = document.getElementById('nav-links');

    if (menuToggle && navLinks) {
        menuToggle.addEventListener('click', () => {
            const isOpen = menuToggle.classList.toggle('is-open');
            navLinks.classList.toggle('is-open');
            menuToggle.setAttribute('aria-expanded', String(isOpen));
        });
    }

    let deferredPrompt;
    const installAppLink = document.getElementById('install-app-link');

    window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        if (installAppLink) {
            installAppLink.style.display = 'block';
        }
    });

    if (installAppLink) {
        installAppLink.addEventListener('click', async (e) => {
            e.preventDefault();
            if (!deferredPrompt) return;
            installAppLink.style.display = 'none';
            deferredPrompt.prompt();
            const { outcome } = await deferredPrompt.userChoice;
            console.log(`User response to the install prompt: ${outcome}`);
            deferredPrompt = null;
        });
    }
</script>